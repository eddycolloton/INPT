#This is a list of functions called throughout the make_dirs and make_meta scripts.

#This function finds the Artwork file path
function FindArtworkFilePath {
	if [[ -d /Volumes/hmsg/DEPARTMENTS/CONSERVATION/ARTWORK\ FILES ]]; then
		ArtFilePath=/Volumes/hmsg/DEPARTMENTS/CONSERVATION/ARTWORK\ FILES 
		echo "found ARTWORK FILES directory at $ArtFilePath"
	elif [[ -d /Volumes/SHARED/DEPARTMENTS/CONSERVATION/ARTWORK\ FILES ]]; then
		ArtFilePath=/Volumes/SHARED/DEPARTMENTS/CONSERVATION/ARTWORK\ FILES
		echo "found ARTWORK FILES directory at $ArtFilePath"
	elif [[ -d /Volumes/shared/departments/CONSERVATION/ARTWORK\ FILES ]]; then
		ArtFilePath=/Volumes/shared/departments/CONSERVATION/ARTWORK\ FILES
		echo "found ARTWORK FILES directory at $ArtFilePath"
	elif [[ -d /Volumes/Shared/departments/CONSERVATION/ARTWORK\ FILES ]]; then
		ArtFilePath=/Volumes/Shared/departments/CONSERVATION/ARTWORK\ FILES
		echo "found ARTWORK FILES directory at $ArtFilePath"
	else
		cowsay -W 30 "Please input the path to the ARTWORK FILES directory from the T:\ drive. Feel free to drag and drop the directory into terminal:"
		read -e ArtFilePath
		echo "The path to the Artwork Files is: $ArtFilePath"
	fi
}

#This function makes the nested directores of a Time-based Media Artwork File
function MakeArtworkFile {
	while [[ -z "$accession" ]] ; do
		echo "Enter Accession Number in '##.##' format" && read accession
		#prompts user for accession number and reads input
	done
	while [[ -z "$title" ]] ; do
		echo "Enter Artwork Title" && read title
		#prompts user for artwork title and reads input
	done
	mkdir -pv "${ArtFilePath%/}"/"$ArtistLastName"", ""$ArtistFirstName"/"time-based media"/"$accession""_""$title"/{"Acquisition and Registration","Artist Interaction","Cataloging","Conservation"/{"Condition_Tmt Reports","DAMS","Equipment Reports"},"Iteration Reports_Exhibition Info"/"Equipment Reports","Photo-Video Documentation","Research"/"Correspondence","Technical Info_Specs"/{"Past installations_Pics","Sidecars"},"Trash"}
	#creates Artwork File directories
	#I've removed the path to the HMSG shared drive below for security reasons
	ArtFile="${ArtFilePath%/}"/"$ArtistLastName"", ""$ArtistFirstName"/
	#assigns the ArtFile variable to the artwork file just created 
	#I've removed the path to the HMSG shared drive below for security reasons
	echo -e "\n*************************************************\nThe Artwork file is $ArtFile\n"
} 

#this function searches the artwork folder for the accession number, if there is one, it retrieves it, if there isn't it requests one from the user
function FindAccessionNumber {
IFS=$'\n'
title_dir_results=$(find "${ArtFile}" -mindepth 0 -maxdepth 4 -type d -iname '*[0-9]*' \( -iname "*.*" -o -iname "*-*" \) -print0 | xargs -0 -L 1  | wc -l | xargs)
#uses find command to identify directories that have numbers in the name AND a . OR a -, then prints them. The first xargs command creates line breaks between the results
#I don't know how xargs works, I got that bit from https://stackoverflow.com/questions/20165321/operating-on-multiple-results-from-find-command-in-bash
#wc -l counts the lines from the output of the find command, this should give the number of directories found that have an accession number in them
#The final xargs removes white space from the output of wc so that theoutput can be evalutated by the "if" statement below

echo -e "This message is for testing purposes and will be removed eventually... \n The number of directories in the artwork file that have numbers in the name are:\n  
$title_dir_results"

if [ "$title_dir_results" \> 1 ];
	#If the variable title_dir_results stores more than one result
	#This is to determine if there is more than one dir in the ArtFile that has an accession number (typically means there are two artworks by the same artist)
then
	echo -e "\nCannot find accession number in Artwork File directories"
	echo -e "\n*************************************************\n
	Input accession number"
	read -e accession
	#Asks for user input and assigns it to variable
	echo "The accession number is $accession"
	accession_dir=$(find "${ArtFile}" -mindepth 0 -maxdepth 4 -type d -iname "*${accession}*") 
	#defines the accession_dir variable as a directory stored inside the ArtFile that has the accession number in it's name
	#This is to define a more specific variable, if there is more than one artwork in the ArtFile
	if [[ -z "${accession_dir}" ]]; 
	#if the accession_dir variable is empty
	#This var will typically be empty if the find command did not return a result
	then
		while [[ -z "$title" ]] ; do
		echo "Enter Artwork Title" && read title
		#prompts user for artwork title and reads input
		done
		accession_dir=$(find "${ArtFile}" -mindepth 0 -maxdepth 4 -type d -iname "*${title}*")
		#defines the accession_dir variable as a directory stored inside the ArtFile that has the title in it's name
		#This is to define a more specific variable, if there is more than one artwork in the ArtFile, or the directory is named in a way that is unexpected (i.e. with no accession number or accession number written ##-##)
		if [[ -z "${accession_dir}" ]];
		#if the accession_dir variable is empty
		then
			echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \n
Cannot find the parent directory from the title or accession number directory \n 
Choose the directory that will store the Technical Info_Specs directory and the Condition_Tmt Reports directory \n 
See directories listed below \n"
			sleep 1
			tree "$ArtFile"
			sleep 2
			cowsay "Select a directory, or choose to quit:"
			#prompt for select command
			IFS=$'\n'; select parentdir_option in "$ArtFile" "Enter path to parent directory" "Quit" ; do
			#lists options for select command. The IFS statment stops it from escaping when it hits spaces in directory names
			case $parentdir_option in 
				"$ArtFile") accession_dir="$ArtFile"
				#if ArtFile is selected, it is assigned the variable $accession_dir
					echo "The Artwork File is $accession_dir"
				break;;
				"Enter path to parent directory") echo "Enter path to parent directory, use tab complete to help:" &&
					read -e parentdir_input &&
					#reads user input and assigns it to the variable $reportdir_parent
					accession_dir="$(echo -e "${parentdir_input}" | sed -e 's/[[:space:]]*$//')"
					#Strips a trailing space from the input. 
					#If the user drags and drops the directory into terminal, it adds a trailling space, which, if passed to other commands, can result in errors. the sed command above prevents this.
					#I find sed super confusing, I lifted this command from https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
					echo "The Artwork File is now $accession_dir"
				break;;
				"Quit") echo "Quitting now..." && exit 1
				#ends the script, exits
			esac	
		done;
		unset IFS
		else echo "The Artwork File is now $accession_dir"
		fi
	else echo "The Artwork File is now $accession_dir"
	fi
fi

if [[ -z "${accession+x}" ]]; 
#if the accession variable is not assigned, and there are numbers in the titledir name
then 
	titledir=$(find "$ArtFile" -mindepth 0 -maxdepth 4 -type d -iname '*[0-9]*' \( -iname "*.*" -o -iname "*-*" \))
	#looks in the ArtFile for a directory with numbers in the name, if it finds one, AND it has a period OR a dash in the directory name, it assigns that to the titledir variable
	if [[ -z "$titledir" ]]; then 
	#if the $titledir variable is empty, then
		echo -e "\nCannot find accession number in Artwork File directories"
		echo -e "\n*************************************************\n
		Input accession number"
		read -e accession
		#Asks for user input and assigns it to variable
		echo "The accession number is $accession"
	fi
	acount=$(echo "$titledir" | grep -oE '[0-9]')
	#this grep command prints every digit it finds in titledir on a new line, and assigns that output to the variable "acount"
	if [[ $(echo "$acount" | wc -l) =~ 3 ]]; then
	#pipes the contents of the acount variable to wc -l, which counts the number of lines. if the number of lines equals 3, then
		accession=`echo $titledir | sed 's/^.*\([0-9][0-9].[0-9]\).*$/\1/' ` 
		#sed command cuts everything before and after ##.# in the titledir variable name. I got the sed command from https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern/243236
		echo -e "*************************************************\n\nThe accession number is $accession\n\n*************************************************\n" 
	elif [[ $(echo "$acount" | wc -l) =~ 4 ]]; then
	#pipes the contents of the acount variable to wc -l, which counts the number of lines. if the number of lines equals 4, then
		accession=`echo $titledir | sed 's/^.*\([0-9][0-9].[0-9][0-9]\).*$/\1/' ` 
		#sed command cuts everything before and after ##.## in the titledir variable name. I got the sed command from https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern/243236
		echo -e "*************************************************\n\nThe accession number is $accession\n\n*************************************************\n"
	elif [[ $(echo "$acount" | wc -l) =~ 7 ]]; then
	#pipes the contents of the acount variable to wc -l, which counts the number of lines. if the number of lines equals 7, then
		echo "$titledir has 7 digits" 
		accession=`echo $titledir | sed 's/^.*\([0-9][0-9][0-9][0-9].[0-9][0-9][0-9]\).*$/\1/' ` 
		#same as before, sed command cuts everything before and after ####.### in the titledir variable name. I got the sed command from https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern/243236
		echo -e "*************************************************\nThe accession number is $accession\n\n*************************************************\n"
	else 
		echo -e "\n*************************************************\n \nCannot find accession number in Artwork File directories"
		echo -e "\n*************************************************\n
		Input accession number"
		read -e accession
		#Asks for user input and assigns it to variable
		echo "The accession number is $accession"
	fi
fi
unset IFS
}

#This function determines if the list_of_dirs.txt file exists, and if it does, it deletes it.
function DeleteList {
test -f $(find "$techdir" -type f \( -iname "*_list_of_dirs.txt" -o -iname "*_list_of_files.txt" \)) && 
find "$techdir" -type f \( -iname "*_list_of_dirs.txt" -o -iname "*_list_of_files.txt" \) -print0 |
	while IFS= read -r -d '' l;
		do rm "$l"
	done
}

#This function makes the staging directory if one does not exist
function MakeStagingDirectory {
	if [ -z "${accession+x}" ]; then
	while [[ -z "$SDir_Accession" ]] ; do 
	echo "Enter Accession Number in '##-##' format" && read SDir_Accession
done;
else SDir_Accession=`echo "$accession" | sed 's/\./-/g'` ;
#The sed command replaces the period in the accession variable with a dash. Found it here: https://stackoverflow.com/questions/6123915/search-and-replace-with-sed-when-dots-and-underscores-are-present 
fi
mkdir /Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$ArtistLastName"
SDir=/Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$ArtistLastName"
echo -e "The Staging Directory is $SDir \n" 
}

function MultiSelection {
cowsay -s "Select directories from the list below, one at a time. Type the corresponding number and press enter to select one. Repeat as necessary. Once all the directories have been selected, press enter again."
#The majority of this function comes from here: http://serverfault.com/a/298312
options=()
while IFS=  read -r -d $'\0'; do
    options+=("$REPLY")
done < <(find "${Volume%/}" -not -path '*/\.*' ! -iname "System Volume Information" -type d -mindepth 1 -print0)
#I got the array parts of this from https://stackoverflow.com/questions/23356779/how-can-i-store-the-find-command-results-as-an-array-in-bash
#Except for the "not path" stuff, to avoid retrieving hidden files, which comes from here: https://askubuntu.com/questions/266179/how-to-exclude-ignore-hidden-files-and-directories-in-a-wildcard-embedded-find
#The -iname statement ignores directories named "System Volume Information" a hidden directory on a drive I was testing with, that the '*/.*' did not catch. we can add other such directories to this find command over time.
#The curly brackets and %/ around the Volume variable remove a trailing "/" if it is present (does nothing if it isn't there). This prevents a double "//" from ending up in the list of directories.
menu() {
    echo "Avaliable options:"
    for i in ${!options[@]}; do
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    [[ "$msg" ]] && echo "$msg" ; :
}
 
prompt="Check an option (again to uncheck, ENTER when done): "
while menu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option: $num"; continue; }
    ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
done 
#All of this is form http://serverfault.com/a/298312
for i in ${!options[@]}; do 
    [[ "${choices[i]}" ]] && { printf "${options[i]}"; msg=""; printf "\n"; } >> "${techdir}/${accession}_list_of_dirs.txt"
    #This "for" loop used to printf a message with the selected options (from http://serverfault.com/a/298312), but I've changed it to print the output of the chioces to a text file. 
done

declare -a SelectedDirs
#creates an empty array
let i=0
while IFS=$'\n' read -r line_data; do
    #stipulates a line break as a field seperator, then assigns the variable "line_data" to each field read
    SelectedDirs[i]="${line_data}"
    #states that each line will be an element in the arary
    ((++i))
    #adds each new line to the array
done < "${techdir}/${accession}_list_of_dirs.txt"
#populates the array with contents of the text file, with each new line assigned as its own element 
#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
echo -e "\nThe selected directories are: ${SelectedDirs[@]}"
DirsList=${SelectedDirs[@]}
#lists the contents of the array, populated by the text file
}

function CopyitSelected {
SECONDS=0 &&
echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** copyit.py started ******** \n\tcopyit.py will be run on selected directories of the volume" >> "${configLogPath}" &&
#print timestamp and command to log
echo -e "******** copyit.py started ******** \n copyit.py will be run on selected directories of the volume" &&
#prints statement to terminal
declare -a SelectedDirs
#creates an empty array
#For whatever reason, the array isn't a golabl variable, so it has to be created again. 
let i=0
while IFS=$'\n' read -r line_data; do
    #stipulates a line break as a field seperator, then assigns the variable "line_data" to each field read
    SelectedDirs[i]="${line_data}"
    #states that each line will be an element in the arary
    ((++i))
    #adds each new line to the array
done < "${techdir}/${accession}_list_of_dirs.txt"
#populates the array with contents of the text file, with each new line assigned as its own element 
#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
for eachdir in "${SelectedDirs[@]}"; do 
#for each element in the array, do
    python3 /Users/briana/IFIscripts-master/copyit.py "$eachdir" "$SDir"
    #add echo statement to log here?
done &&
#run the IFI copyit script and send each selected directory to the staging directory
#On 03/02/2021 I had all kinds of problems with python3 after an xcode update. I ran brew unlink python@3.9, brew unlink python@3.8, and brew link python@3.8. Then I ran echo 'export PATH="/usr/local/opt/python@3.8/bin:$PATH"' >> ~/.zshrc. This last step seemed to make it work, but I have to run pip3 with "sudo" now. Solution fond here: https://github.com/Homebrew/homebrew-core/issues/62911#issuecomment-733866503
find "$SDir" -type f \( -iname "*_manifest.md5" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$techdir" && echo -e "\n***** md5 checksum manifest ***** \n" >> "${reportdir}/${accession}_appendix.txt" && cat "$t" >> "${reportdir}/${accession}_appendix.txt"
	done
if [[ -n $(find "${SDir}" -name "*_manifest.md5") ]]; then 
	echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** copyit.py completed ******** \n\n\t\tcopyit.py Results:\n\t\tselect directories copied to the $SDir" >> "${configLogPath}" &&
	#prints timestamp once the command has exited
	duration=$SECONDS
	echo "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}" 
else 
	echo -e "\n\n\t\tcopyit.py Results:\n\t\txxxxxxxx No manfiest file found in $SDir xxxxxxxx" >> "${configLogPath}"
fi
}

function SelectFiles {
cowsay -s "Select individual files from the list below, one at a time. Type the corresponding number and press enter to select one. Repeat as necessary. Once all the directories have been selected, press enter again."
#The majority of this function comes from here: http://serverfault.com/a/298312
options=()
while IFS=  read -r -d $'\0'; do
    options+=("$REPLY")
done < <(find "${Volume%/}" -not -path '*/\.*' ! -iname "System Volume Information" -type f -mindepth 1 -print0)
#I got the array parts of this from https://stackoverflow.com/questions/23356779/how-can-i-store-the-find-command-results-as-an-array-in-bash
#Except for the "not path" stuff, to avoid retrieving hidden files, which comes from here: https://askubuntu.com/questions/266179/how-to-exclude-ignore-hidden-files-and-directories-in-a-wildcard-embedded-find
#The -iname statement ignores directories named "System Volume Information" a hidden directory on a drive I was testing with, that the '*/.*' did not catch. we can add other such directories to this find command over time.
#The curly brackets and %/ around the Volume variable remove a trailing "/" if it is present (does nothing if it isn't there). This prevents a double "//" from ending up in the list of directories.
menu() {
    echo "Avaliable options:"
    for i in ${!options[@]}; do
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    [[ "$msg" ]] && echo "$msg" ; :
}
 
prompt="Check an option (again to uncheck, ENTER when done): "
while menu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option: $num"; continue; }
    ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
done 
#All of this is form http://serverfault.com/a/298312
for i in ${!options[@]}; do 
    [[ "${choices[i]}" ]] && { printf "${options[i]}"; msg=""; printf "\n"; } >> "${techdir}/${accession}_list_of_files.txt"
    #This "for" loop used to printf a message with the selected options (from http://serverfault.com/a/298312), but I've changed it to print the output of the chioces to a text file. 
done

declare -a SelectedFiles
#creates an empty array
let i=0
while IFS=$'\n' read -r line_files; do
    #stipulates a line break as a field seperator, then assigns the variable "line_files" to each field read
    SelectedFiles[i]="${line_files}"
    #states that each line will be an element in the arary
    ((++i))
    #adds each new line to the array
done < "${techdir}/${accession}_list_of_files.txt"
#populates the array with contents of the text file, with each new line assigned as its own element 
#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
echo -e "\nThe selected files are: ${SelectedFiles[@]}"
FileList=${SelectedFiles[@]}
#lists the contents of the array, populated by the text file
}

#This function will create an md5 checksum manifest for the files on the Volume if the "no, specific files" option from the "Run_Copyit" select loop is chosen 
function RunIndvMD5 {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** generating md5 checksums on selected files ******** \nmd5deep will be run on ${Volume}" >> "${configLogPath}" &&
	echo -e " ******** generating md5 checksums on selected files ******** \n md5deep will be run on ${Volume}" &&
	#prints statement to terminal
	declare -a SelectedFiles
	#creates an empty array
	#For whatever reason, the array isn't a golabl variable, so it has to be created again. 
	let i=0
	while IFS=$'\n' read -r line_files; do
    #stipulates a line break as a field seperator, then assigns the variable "line_data" to each field read
    	SelectedFiles[i]="${line_files}"
    	#states that each line will be an element in the arary
    	((++i))
    	#adds each new line to the array
	done < "${techdir}/${accession}_list_of_files.txt"
	#populates the array with contents of the text file, with each new line assigned as its own element 
	#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
	for eachfile in "${SelectedFiles[@]}"; do 
	#for each element in the array, do
    	md5deep -b -e "$eachfile" >> "${SDir}/${accession}_Volume_manifest.txt"
    	#runs md5deep on each element in the array, and prints it to a manifest text file
	#maybe run echo statement to print to log?
	done
	echo -e "\n***** md5 manifest from ${Volume} ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
	cat "${SDir}/${accession}_Volume_manifest.txt" >> "${reportdir}/${accession}_appendix.txt" &&
	cp "${SDir}/${accession}_Volume_manifest.txt" "$techdir"
	if [[ -f "${SDir}/${accession}_Volume_manifest.txt" ]]; then
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** md5 checksum manifest from ${Volume} completed ******** \n\n\t\tmd5deep Results:\n\t\tcopied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
	else
		echo -e "\n\t\tmd5deep Results:\n\t\txxxxxxxx md5 manifest of ${Volume} output not found in $SDir xxxxxxxx" >> "${configLogPath}"
	fi
}

function CopyFiles {
SECONDS=0 &&
echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** copying files started ******** \n\tcopying individual files from the volume" >> "${configLogPath}" &&
#print timestamp and command to log
echo -e "******** copying files started ******** \n copying individual files from the volume"  &&
#print statement to terminal
declare -a SelectedFiles
#creates an empty array
#For whatever reason, the array isn't a golabl variable, so it has to be created again. 
let i=0
while IFS=$'\n' read -r line_files; do
    #stipulates a line break as a field seperator, then assigns the variable "line_data" to each field read
    SelectedFiles[i]="${line_files}"
    #states that each line will be an element in the arary
    ((++i))
    #adds each new line to the array
done < "${techdir}/${accession}_list_of_files.txt"
#populates the array with contents of the text file, with each new line assigned as its own element 
#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
echo -e "\n\tlist of files copied below:" >> "${configLogPath}"
#prints the above statement to the log
for eachfile in "${SelectedFiles[@]}"; do 
#for each element in the array, do
    rsync -aihW --progress --log-file="${techdir}/${accession}_$(basename $eachfile)_rsynclog.txt" "$eachfile" "$SDir"
    #runs rsync with the archive mode, itemized changes (prints to log), human readable, and whole file flags
    #prints a seperate log file for each of the individual files to the  techdir
    echo -e "\t${eachfile}" >> "${configLogPath}" 
    #prints the name of each file to the log
    md5deep -b -e "${SDir}/$(basename $eachfile)" >> "${SDir}/${accession}_SDir_manifest.txt"
done &&
echo -e "\n***** md5 manifest from ${SDir} ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
cat "${SDir}/${accession}_SDir_manifest.txt" >> "${reportdir}/${accession}_appendix.txt" &&
if [[ -f "${SDir}/${accession}_SDir_manifest.txt" ]]; then
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** file copying and md5 checksum manifest from ${SDir} completed ******** \n\n\t\trsync Results:\n\t\tmanifest copied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt \n rsync logs in ${techdir}" >> "${configLogPath}" &&
	#prints timestamp once the command has exited
	duration=$SECONDS
	echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
else
	echo -e "\n\n\t\trsync Results:\n\t\txxxxxxxx md5 manifest of ${SDir} output not found in $SDir xxxxxxxx" >> "${configLogPath}"
fi
Md5comp=$(diff "${SDir}/${accession}_Volume_manifest.txt" "${SDir}/${accession}_SDir_manifest.txt")
#Sets the variable Md5comp to be the output of the diff command run on the two md5 manifests created if select individual files is chosen by the user
if [ "$Md5comp" != "" ]
#if the variable is empty then, (taken from https://stackoverflow.com/questions/3611846/bash-using-the-result-of-a-diff-in-a-if-statement)
then
	echo "The ${Volume} md5 manifest and the ${SDir} md5 manifest do not match!"
	echo -e "\n xxxxxxxx No manfiest file found in $SDir xxxxxxxx" >> "${configLogPath}"
	diff -y "${SDir}/${accession}_Volume_manifest.txt" "${SDir}/${accession}_SDir_manifest.txt" > "${techdir}/${accession}_$(date "+%Y-%m-%d - %H.%M.%S")_md5_collision.txt"
else
	echo -e "Files moved to ${SDir} and the \nchecksums match!"
	echo -e "All checksums match!" >> "${reportdir}/${accession}_appendix.txt"
	echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** checksum manifests match ******** \n" >> "${configLogPath}" &&
	#prints timestamp once the command has exited
	duration=$SECONDS
	echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}" 
fi
}

function FindConditionDir {
if [[ -z "$accession_dir" ]]; then
	#if the $accession_dir variable is empty (unassigned - which would mean there was only one artwork found in the Art File, then) 
	reportdir=$(find "${ArtFile%/}" -maxdepth 4 -type d -iname "*Condition*")
	#looks for a directory with Conidition in the name that is a subdirectory of $ArtFile and, if found, assigns it to the $reportdir variable
	#The "%/" removes the trailing "/" on the end of the ArtFile
	if [[ -z "$reportdir" ]]; then 
	#if the $reportdir variable is empty (unassigned), then 
		echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \nCannot find Condition_Tmt Reports directory \n See directories listed below \n"
		tree "$ArtFile"
		cowsay "Select a directory to create the Condition_Tmt Reports directory, or choose to quit:"
		#prompt for select command
		IFS=$'\n'; select reportdir_option in "$ArtFile" "Enter path to parent directory" "Quit" ; do
		#lists options for select command. The IFS statment stops it from escaping when it hits spaces in directory names
		case $reportdir_option in 
		"$ArtFile") reportdir_parent="$ArtFile" &&
		#if ArtFile is selected, it is assigned the variable $reportdir_parent
			mkdir -pv "${reportdir_parent%/}/Condition_Tmt Reports" &&
			#creates Condition_Tmt Reports directory underneath the $reportdir_parent
			reportdir="${reportdir_parent%/}/Condition_Tmt Reports"
			#assigns the $reportdir variable to the newly created directory
			break;;
		"Enter path to parent directory") echo "Enter path to parent directory, use tab complete to help:" &&
			read -e reportdir_parent_input &&
			#reads user input and assigns it to the variable $reportdir_parent
			reportdir_parent="$(echo -e "${reportdir_parent_input}" | sed -e 's/[[:space:]]*$//')"
			#Strips a trailing space from the input. 
			#If the user drags and drops the directory into terminal, it adds a trailling space, which, if passed to other commands, can result in errors. the sed command above prevents this.
			#I find sed super confusing, I lifted this command from https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
			mkdir -pv "${reportdir_parent%/}/Condition_Tmt Reports" &&
			#creates Condition_Tmt Reports directory underneath the $reportdir_parent
			reportdir="${reportdir_parent%/}/Condition_Tmt Reports"
			#assigns the $reportdir variable to the newly created directory
			break;;
		"Quit") echo "Quitting now..." && exit 1
		#ends the script, exits
			esac	
		done;
		unset IFS
		echo -e "\n*************************************************\n \nThe Condition_Tmt Reports directory is $reportdir \n\nMetadata output will be written to the appendix.txt file in $reportdir \n\n*************************************************\n"
	else echo -e "\n*************************************************\n \nThe Condition_Tmt Reports directory is $reportdir \n\nMetadata output will be written to the appendix.txt file in $reportdir \n\n*************************************************\n"
	#States the location of the report dir if it was found in the inital find command (before the if statement)
	fi
else
	reportdir=$(find "${accession_dir%/}" -maxdepth 4 -type d -iname "*Condition*")
	#looks for a directory with Conidition in the name that is a subdirectory $accession_dir, if found, assigns it to the $reportdir variable
	#The "%/" removes the trailing "/" on the end of the ArtFile
	if [[ -z "$reportdir" ]]; then 
	#if the $reportdir variable is empty (unassigned), then 
		echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \nCannot find Condition_Tmt Reports directory \n See directories listed below \n"
		tree "$ArtFile"
		cowsay "Select a directory to create the Condition_Tmt Reports directory, or choose to quit:"
		#prompt for select command
		IFS=$'\n'; select reportdir_option in "$accession_dir" "Enter path to parent directory" "Quit" ; do
		#lists options for select command. The IFS statment stops it from escaping when it hits spaces in directory names
		case $reportdir_option in 
		"$accession_dir") reportdir_parent="$accession_dir" &&
		#if ArtFile is selected, it is assigned the variable $reportdir_parent
			mkdir -pv "${reportdir_parent%/}/Condition_Tmt Reports" &&
			#creates Condition_Tmt Reports directory underneath the $reportdir_parent
			reportdir="${reportdir_parent%/}/Condition_Tmt Reports"
			#assigns the $reportdir variable to the newly created directory
			break;;
		"Enter path to parent directory") echo "Enter path to parent directory, use tab complete to help:" &&
			read -e reportdir_parent_input &&
			#reads user input and assigns it to the variable $reportdir_parent
			reportdir_parent="$(echo -e "${reportdir_parent_input}" | sed -e 's/[[:space:]]*$//')"
			#Strips a trailing space from the input. 
			#If the user drags and drops the directory into terminal, it adds a trailling space, which, if passed to other commands, can result in errors. the sed command above prevents this.
			#I find sed super confusing, I lifted this command from https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
			mkdir -pv "${reportdir_parent%/}/Condition_Tmt Reports" &&
			#creates Condition_Tmt Reports directory underneath the $reportdir_parent
			reportdir="${reportdir_parent%/}/Condition_Tmt Reports"
			#assigns the $reportdir variable to the newly created directory
			break;;
		"Quit") echo "Quitting now..." && exit 1
		#ends the script, exits
			esac	
		done;
		unset IFS
		echo -e "\n*************************************************\n \nThe Condition_Tmt Reports directory is $reportdir \n\nMetadata output will be written to the appendix.txt file in $reportdir \n\n*************************************************\n"
	else echo -e "\n*************************************************\n \nThe Condition_Tmt Reports directory is $reportdir \n\nMetadata output will be written to the appendix.txt file in $reportdir \n\n*************************************************\n"
	#States the location of the report dir if it was found in the inital find command (before the if statement)
	fi
fi
}

function FindTechDir {
if [[ -z "$accession_dir" ]]; then
	techdir=$(find "${ArtFile%/}" -maxdepth 4 -type d -iname "*Technical Info*")
	#looks for the Technical Info_Specs directory
	#The "%/" removes the trailing "/" on the end of the ArtFile
	if [[ -z "$techdir" ]]; then
	#if the $techdir variable is empty (unassigned), then 
		echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \nCannot find Technical Info_Specs directory\nSee directories listed below \n"
		tree "$ArtFile"
		cowsay "Select a directory to create the Technical Info_Specs directory, or choose to quit:"
		#prompt for select command
		IFS=$'\n'; select techdir_option in "$ArtFile" "Enter path to parent directory" "Quit" ; do
		#lists options for select command, the ArtFile and subsequent subdirectories, regadless of name. The IFS statment stops it from escaping when it hits spaces in directory names
		case $techdir_option in 
		"$ArtFile") techdir_parent="$ArtFile" &&
		#if ArtFile is selected, it is assigned the variable $techdir_parent
			mkdir -pv "${techdir_parent%/}/Technical Info_Specs/Sidecars" &&
			#creates Technical Info_Specs directory underneath the $techdir_parent
			techdir="${techdir_parent%/}/Technical Info_Specs"
			#assigns the $techdir variable to the newly created directory
			sidecardir="${techdir_parent%/}/Technical Info_Specs/Sidecars"
			#assigns the $sidecardir variable to the newly created directory
			break;;
		"Enter path to parent directory") echo "Enter path to parent directory, use tab complete to help:" &&
			read -e techdir_parent_input &&
			#reads user input and assigns it to the variable $techdir_parent_input
			techdir_parent="$(echo -e "${techdir_parent_input}" | sed -e 's/[[:space:]]*$//')"
			#Strips a trailing space from the input. 
			#If the user drags and drops the directory into terminal, it adds a trailling space, which, if passed to other commands, can result in errors. the sed command above prevents this.
			#I find sed super confusing, I lifted this command from https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
			mkdir -pv "${techdir_parent%/}/Technical Info_Specs/Sidecars" &&
			#creates Technical Info_Specs directory underneath the $techdir_parent
			techdir="${techdir_parent%/}/Technical Info_Specs"
			#assigns the $techdir variable to the newly created directory
			sidecardir="${techdir_parent%/}/Technical Info_Specs/Sidecars"
			#assigns the $sidecardir variable to the newly created directory
			break;;
		"Quit") echo "Quitting now..." && exit 1
			#ends the script, exits
			esac	
		done;
		unset IFS
		echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to sidecar files in $sidecardir \n\n*************************************************\n"
	else 
		sidecardir=$(find "${techdir%/}" -maxdepth 2 -type d -iname "*Sidecars*")
		if [[ -z "$sidecardir" ]]; then
		#if the $sidecardir variable is empty (unassigned), then
		#In other words, if the find command fails to find a directory called "sidecars" in the techdir, then
			mkdir -pv "${techdir%/}/Sidecars" &&
			sidecardir="${techdir%/}/Sidecars" 
			echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to sidecar files in $sidecardir \n\n*************************************************\n"
		else
			echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to sidecar files in $sidecardir \n\n*************************************************\n"
		fi
	#States the location of the tech dir if it was found in the inital find command (before the if statement)
	fi
else
	techdir=$(find "${accession_dir%/}" -maxdepth 4 -type d -iname "*Technical Info*")
	#looks for the Technical Info_Specs directory
	#The "%/" removes the trailing "/" on the end of the ArtFile
	if [[ -z "$techdir" ]]; then
	#if the $techdir variable is empty (unassigned), then 
		echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \nCannot find Technical Info_Specs directory\nSee directories listed below \n"
		tree "$ArtFile"
		cowsay "Select a directory to create the Technical Info_Specs directory, or choose to quit:"
		#prompt for select command
		IFS=$'\n'; select techdir_option in "$accession_dir" "Enter path to parent directory" "Quit" ; do
		#lists options for select command, the ArtFile and subsequent subdirectories, regadless of name. The IFS statment stops it from escaping when it hits spaces in directory names
		case $techdir_option in 
		"$accession_dir") techdir_parent="$accession_dir" &&
		#if ArtFile is selected, it is assigned the variable $techdir_parent
			mkdir -pv "${techdir_parent%/}/Technical Info_Specs/Sidecars" &&
			#creates Technical Info_Specs directory underneath the $techdir_parent
			techdir="${techdir_parent%/}/Technical Info_Specs"
			#assigns the $techdir variable to the newly created directory
			sidecardir="${techdir_parent%/}/Technical Info_Specs/Sidecars"
			#assigns the $sidecardir variable to the newly created directory
			break;;
		"Enter path to parent directory") echo "Enter path to parent directory, use tab complete to help:" &&
			read -e techdir_parent_input &&
			#reads user input and assigns it to the variable $techdir_parent_input
			techdir_parent="$(echo -e "${techdir_parent_input}" | sed -e 's/[[:space:]]*$//')"
			#Strips a trailing space from the input. 
			#If the user drags and drops the directory into terminal, it adds a trailling space, which, if passed to other commands, can result in errors. the sed command above prevents this.
			#I find sed super confusing, I lifted this command from https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
			mkdir -pv "${techdir_parent%/}/Technical Info_Specs/Sidecars" &&
			#creates Technical Info_Specs directory underneath the $techdir_parent
			techdir="${techdir_parent%/}/Technical Info_Specs"
			#assigns the $techdir variable to the newly created directory
			sidecardir="${techdir_parent%/}/Technical Info_Specs/Sidecars"
			#assigns the $sidecardir variable to the newly created directory
			break;;
		"Quit") echo "Quitting now..." && exit 1
			#ends the script, exits
			esac	
		done;
		unset IFS
		echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to sidecar files in $sidecardir \n\n*************************************************\n"
	else 
		sidecardir=$(find "${techdir%/}" -maxdepth 2 -type d -iname "*Sidecars*")
		if [[ -z "$sidecardir" ]]; then
		#if the $sidecardir variable is empty (unassigned), then
		#In other words, if the find command fails to find a directory called "sidecars" in the techdir, then
			mkdir -pv "${techdir%/}/Sidecars" &&
			sidecardir="${techdir%/}/Sidecars" 
			echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to sidecar files in $sidecardir \n\n*************************************************\n"
		else
			echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to sidecar files in $sidecardir \n\n*************************************************\n"
		fi
	#States the location of the tech dir if it was found in the inital find command (before the if statement)
	fi
fi
}

#This function creates a log at a specific directory
function logCreate {
   configLogPath="${1}"
   timestamp=$(date "+%Y-%m-%d - %H.%M.%S")
   touch "${configLogPath}"
   echo "====== Script started at $timestamp ======" >> "${configLogPath}"
}

#This function adds a new line to the log
function logNewLine {
   timestamp=$(date "+%Y-%m-%d - %H.%M.%S")
   echo -e "$timestamp - ${1}" >> "${configLogPath}"
}

#This function adds contents to the current line fo the log
function logCurrentLine {
   sed -i '' -e '$s/$/'"$1"'/' "${configLogPath}"     #this was a doozy to write. the -i '' -e is required for MacOS for some reason
}
#All of the log functions are lifted from https://github.com/amiaopensource/loglog/blob/main/bash_logging.config

#This function runs the python script copyit.py from the IFIscripts directory
function CopyitVolumeStaging {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** copyit.py started ******** \n -------------------> copyit.py will be run on all contents of the volume" >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e "******** copyit.py started ******** \n copyit.py will be run on all contents of the volume" &&
	#prints statement to log
	python3 /Users/briana/IFIscripts-master/copyit.py "$Volume" "$SDir" &&
	for t in "`find "$SDir" -name "*_manifest.md5"`" ; do cp "$t" "$techdir" && echo -e "\n***** md5 checksum manifest ***** \n" >> "${reportdir}/${accession}_appendix.txt" && cat "$t" >> "${reportdir}/${accession}_appendix.txt"
	done
	if [[ -n $(find "${SDir}" -name "*_manifest.md5") ]]; then 
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** copyit.py completed ******** \n\n\t\tcopyit.py Results:\n\t\tall files copied to the $SDir" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
	else 
		echo -e "\n\n\t\tcopyit.py Results:\n\t\t\n xxxxxxxx No manfiest file found in $SDir xxxxxxxx" >> "${configLogPath}"
	fi
}

#This function will create a disktype output and copy the output to Staging Directory, Tech Specs dir in ArtFile and appendix in ArtFile
function disktype {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** disktype started ******** \n " >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e " ******** disktype started ******** \n disktype running on $Device" &&
	#prints statement to terminal
	sudo disktype $Device > "$SDir"/"$accession"_disktype_output.txt &&
	echo -e "\n***** disktype output ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
	cat "${SDir}/${accession}_disktype_output.txt" >> "${reportdir}/${accession}_appendix.txt" &&
	cp "${SDir}/${accession}_disktype_output.txt" "$sidecardir"
	if [[ -f "${SDir}/${accession}_disktype_output.txt" ]]; then
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** disktype completed ******** \n\n\t\tdisktype Results:\n\t\tcopied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** disktype complete ******** \n"
		#prints statement to terminal
	else 
		echo -e "\n\n\t\tdisktype Results:\n\t\txxxxxxxx disktype output not found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** disktype output not found in $SDir ******** \n"
		#prints statement to terminal
	fi
}

#This function runs tree on the Volume sends the output to three text files 
function RunTree {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** tree started ******** \n " >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e " ******** tree started ******** \n tree running on $Volume \n" &&
	#prints statement to terminal
	tree "$Volume" > "$SDir"/"$accession"_tree_output.txt &&
	echo -e "\n***** tree output ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
	cat "${SDir}/${accession}_tree_output.txt" >> "${reportdir}/${accession}_appendix.txt" &&
	cp "${SDir}/${accession}_tree_output.txt" "$sidecardir"
	if [[ -f "${SDir}/${accession}_tree_output.txt" ]]; then
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** tree completed ******** \n\n\t\ttree Results:\n\t\tcopied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** tree complete ******** \n"
		#prints statement to terminal
	else
		echo -e "\n\n\t\ttree Results:\n\t\txxxxxxxx tree output not found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** tree output not found in $SDir ******** \n"
		#prints statement to terminal
	fi
}
 
#This function will create siegfried sidecar files for all files in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunSF {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** siegfried started ******** \n siegfried will be run on $SDir" >> "${configLogPath}" &&
	#prints timestamp to log
	echo -e " ******** siegfried started ******** \n siegfried will be run on $SDir \n" &&
	#prints statement to terminal
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" ! -iname "*_manifest.txt" ! -iname "*_sf.txt" ! -iname "*_exif.txt" ! -iname "*_mediainfo.txt" ! -iname "*_qctools.mkv" ! -iname "*_framemd5.txt" ! -iname "*.log" \) -print0 | 
	while IFS= read -r -d '' i; do
		sf "$i" > "${i%.*}_sf."txt 
		echo -e "\t$(date "+%Y-%m-%d - %H.%M.%S") sf run on ${i}" >> "${configLogPath}"
	#runs sf on all files in the staging directory except files that were made earlier in this workflow (md5 manifest, disktype, tree, and DS_Stores) 
	#The "for" loop was not working with this command. I found the IFS solution online, but honestly don't totally understand how it works.
	done && 
	find "$SDir" -type f \( -iname "*_sf.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do 
		cp "$t" "$sidecardir"
		echo -e "\n***** siegfried output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
		cat "$t" >> "${reportdir}/${accession}_appendix.txt"
	done 
	if [[ -n $(find "${SDir}" -name "*_sf.txt") ]] ; then 
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** siegfried completed ******** \n\n\t\tsf Results:\n\t\tcopied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** sf complete ******** \n"
		#prints statement to terminal
	else 
		echo -e "\n\n\t\tsf Results:\n\t\txxxxxxxx No siegfried files found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** sf output not found in $SDir ******** \n"
		#prints statement to terminal
	fi
}

#This function will create MediaInfo sidecar files for all files with .mp4, .mov and .mkv file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunMI {
	SECONDS=0 &&
echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** MediaInfo started ******** \nMediaInfo will be run on audio and video files in $SDir" >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e " ******** MediaInfo started ******** \n MediaInfo will be run on audio and video files in $SDir \n" &&
	#prints statement to terminal
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.VOB -o -iname \*.avi -o -iname \*.mpg -o -iname \*.wav -o -iname \*.mp3 \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			mediainfo -f "$i" > "${i%.*}_mediainfo".txt
			#echo -e "\n***** mediainfo -f output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
			#mediainfo -f "$i" >> "${reportdir}/${accession}_appendix.txt"
			#I have been running mediainfo twice, which is too costly for large files. I have added the echo and cat commands to the next while loop to simply cat the sidecars into the appendix. I'm leaving the old code here while I test further. 
			echo -e "\t$(date "+%Y-%m-%d - %H.%M.%S") mediainfo run on ${i}" >> "${configLogPath}"
	done &&
	find "$SDir" -type f \( -iname "*_mediainfo.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$sidecardir"
		echo -e "\n***** mediainfo -f output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
		cat "$t" >>  "${reportdir}/${accession}_appendix.txt"
	done
	if [[ -n $(find "${SDir}" -name "*_mediainfo.txt") ]]; then 
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** MediaInfo completed ******** \n\n\t\tMediaInfo Results:\n\t\tcopied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** MediaInfo complete ******** \n"
		#prints statement to terminal
	else 
		echo -e "\n\n\t\tMediaInfo Results:\n\t\txxxxxxxx No MediaInfo files found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** MediaInfo output not found in $SDir ******** \n"
		#prints statement to terminal
	fi
}

#This function will create Exiftool sidecar files for all files with .jpg, .jpeg, .png and .tiff file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunExif {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** Exiftool started ******** \nExiftool will be run on files in $SDir" >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e "******** Exiftool started ******** \n Exiftool will be run on files in $SDir \n" &&
	#prints statement to terminal
	find "$SDir" -type f \( -iname \*.jpg -o -iname \*.jpeg -o -iname \*.png -o -iname \*.tiff \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			exiftool "$i" > "${i%.*}_exif".txt
			#echo -e "\n***** Exiftool output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
			#exiftool "$i" >> "${reportdir}/${accession}_appendix.txt" 
			#I've moved these two commands to the next while loop, just as I have with mediainfo, see comment in RunMI function
			echo -e "\t$(date "+%Y-%m-%d - %H.%M.%S") exiftool run on ${i}" >> "${configLogPath}"
	done &&
	find "$SDir" -type f \( -iname "*_exif.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do 
			cp "$t" "$sidecardir"
			echo -e "\n***** Exiftool output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
			cat "$t" >> "${reportdir}/${accession}_appendix.txt"
	done
	if [[ -n $(find "${SDir}" -name "*_exif.txt") ]]; then
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** Exiftool completed ******** \n\n\t\tExiftool Results:\n\t\treports copied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** Exiftool complete ******** \n"
		#prints statement to terminal
	else
		echo -e "\n\n\t\tExiftool Results:\n\t\txxxxxxxx No exiftool files found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** Exiftool output not found in $SDir ******** \n"
		#prints statement to terminal
	fi 
}

#This function will make a text file containing md5 checksums of each frame of any video files in the Staging Directory. The output will be saved as a side car file in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_Framemd5 {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** framemd5 started ******** \nframemd5 will be run on video files in $SDir" >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e " ******** framemd5 started ******** \n framemd5 will be run on video files in $SDir" &&
	#prints statement to terminal
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.avi -o -iname \*.VOB -o -iname \*.mpg -o -iname \*.wav -o -iname \*.flac -o -iname \*.mp3 -o -iname \*.aac -o -iname \*.wma -o -iname \*.m4a \) -print0 |  
	while IFS= read -r -d '' i;
		do   
			ffmpeg -nostdin -i "$i" -f framemd5 -an  "${i%.*}_framemd5".txt 
			echo -e "\t$(date "+%Y-%m-%d - %H.%M.%S") framemd5 run on ${i}" >> "${configLogPath}" 
	done && 
	find "$SDir" -type f \( -iname "*_framemd5.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$sidecardir"
	done
	if [[ -n $(find "${SDir}" -name "*_framemd5.txt") ]]; then
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** framemd5 completed ******** \n\n\t\tFramemd5 Results:\n\t\treports copied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** Framemd5 complete ******** \n"
		#prints statement to terminal
	else
		echo -e "\n\n\t\tFramemd5 Results:\n\t\txxxxxxxx No framemd5 files found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** Framemd5 output not found in $SDir ******** \n"
		#prints statement to terminal
	fi
}

#This function will make a QCTools report for video files with the .mp4, .mov and .mkv extensions and save the reports as sidecar files in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_QCT {
	SECONDS=0 &&
	echo -e "\n$(date "+%Y-%m-%d - %H.%M.%S") ******** QCTools started ******** \nQCTools run on video files in $SDir" >> "${configLogPath}" &&
	#print timestamp and command to log
	echo -e "******** QCTools started ******** \n QCTools run on video files in $SDir" &&
	#prints statement to terminal
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.VOB -o -iname \*.avi -o -iname \*.mpg \) -print0 |  
	while IFS= read -r -d '' i;
		do qcli -i "$i"
		echo -e "\t$(date "+%Y-%m-%d - %H.%M.%S") qctools run on ${i}" >> "${configLogPath}"
	done && 
	find "$SDir" -type f \( -iname "*.qctools.xml.gz" -o -iname "*.qctools.mkv" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$sidecardir"
	done
	if [[ -n $(find "${SDir}" -name "*.qctools*") ]]; then
		echo -e "$(date "+%Y-%m-%d - %H.%M.%S") ******** QCTools completed ******** \n\n\t\tQCTools Results:\n\t\treports copied to ${SDir} and \n\t\t${reportdir}/${accession}_appendix.txt" >> "${configLogPath}" &&
		#prints timestamp once the command has exited
		duration=$SECONDS
		echo -e "\t\t===================> Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}"
		echo -e "\n ******** QCTools complete ******** \n"
		#prints statement to terminal
	else
		echo -e "\n\n\t\tQCTools Results:\n\t\txxxxxxxx No QCTools reports found in $SDir xxxxxxxx" >> "${configLogPath}"
		echo -e "\n ******** QCTools output not found in $SDir ******** \n"
		#prints statement to terminal
	fi 
}

